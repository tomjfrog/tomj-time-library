name: 'NO JF WRAPPER: Build and Publish Artifact'

permissions:
  id-token: write

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3
      # Set up JDK (Java Development Kit)
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '21'  # You can change this to '8', '17', etc., depending on your project

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-jfrog-cli
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_PROJECT: "tomj-time-lib"
        with:
          oidc-provider-name: github-oidc-integration
          oidc-audience: jfrog-github
          disable-auto-build-publish: true

#      - name: maven-settings-action
#        uses: s4u/maven-settings-action@v3.0.0
#        with:
#          servers: |
#          [{
#            "id": "central", "username": "tomj@jfrog.com", "password": "${{ steps.setup-jfrog-cli.outputs.oidc-token}}"},{"id": "snapshots", "username": "tomj@jfrog.com", "password": "${{ steps.setup-jfrog-cli.outputs.oidc-token}}"}]

      - name: Set Maven Settings From Secret
        run:  |
          echo "${{ secrets.MAVEN_SETTINGS }}" | base64 --decode > /home/runner/.m2/settings.xml

      # Cache Maven dependencies for faster builds
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

    # purging the local m2 cache doesn't really do anything to separate the actual dependencies from the Maven junk
      - name: Purge Local Maven Cache and Build Library
        run: |
          mvn clean install deploy -P artifactory

      - name: Look for Maven Local Repository
        run: |
          echo $(pwd)
          echo $(ls ~)
          echo $(ls -lah ~/.m2/repository)

      - name: Prepre GAV String for Build Info Module Link
        id: gav
        run: |
          echo GAV="$(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout):$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout):$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

      - name: Prepare Build Info
        run: |
          jf rt build-add-dependencies --spec .github/workflows/filespecs/add-local-maven-repo-deps.json tomj-time-lib ${{ github.run_number }} --module ${{ steps.gav.outputs.GAV }}
          jf rt bag tomj-time-lib ${{ github.run_number }}
          jf rt bce tomj-time-lib ${{ github.run_number }}

      - name: Publish Build Info
        run: |
          jf rt bp tomj-time-lib ${{ github.run_number }}

      - name: Set Properties on Published Artifacts
        run: |
          jf rt set-props commit_sha=${{ github.sha }} --build tomj-time-lib/${{ github.run_number }}